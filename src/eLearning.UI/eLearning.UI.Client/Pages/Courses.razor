@page "/courses"

@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject AppSettingsService AppSettings
@inject IConfiguration Configuration

@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using Blazorise
@using Blazorise.DataGrid
@using System.Net.Http.Headers
@using eLearning.UI.Client.Models
@using eLearning.UI.Client.Services

<PageTitle>Courses</PageTitle>

<style>
    .data-grid-wrapper {
        overflow-x: auto;
        padding-bottom: 1rem;
    }
</style>

<h3 class="mb-4">Courses Management</h3>

<div class="data-grid-wrapper">
    <DataGrid TItem="CourseModel"
              Data="@courses"
              EditMode="DataGridEditMode.Form"
              Editable="true"
              Responsive="true"
              Bordered
              Striped
              Sortable
              ShowPager
              PageSize="10"
              RowInserted="OnRowInserted"
              RowUpdated="OnRowUpdated"
              RowRemoved="OnRowRemoved">

        <DataGridColumns>
            <DataGridColumn TItem="CourseModel" Field="@nameof(CourseModel.Title)" Caption="Title" Editable="true" />
            <DataGridColumn TItem="CourseModel" Field="@nameof(CourseModel.Description)" Caption="Description" Editable="true" />
            <DataGridColumn TItem="CourseModel" Field="@nameof(CourseModel.Price)" Caption="Price" Editable="true" />
            <DataGridColumn TItem="CourseModel" Field="@nameof(CourseModel.Duration)" Caption="Duration" Editable="true" />
            <DataGridColumn TItem="CourseModel" Field="@nameof(CourseModel.CourseLanguage)" Caption="Language" Editable="true" />
            <DataGridColumn TItem="CourseModel" Field="@nameof(CourseModel.CourseLevel)" Caption="Level" Editable="true" />
            <DataGridColumn TItem="CourseModel" Field="@nameof(CourseModel.LecturerName)" Caption="Lecturer" Editable="false" />

            <!-- Image Preview Column -->
            <DataGridColumn TItem="CourseModel" Caption="Image">
                <DisplayTemplate Context="course">
                    @if (!string.IsNullOrWhiteSpace(course.ImageUrl))
                    {
                        <img src="@course.ImageUrl"
                             @onclick="() => ShowImage(course.ImageUrl)"
                             style="cursor:pointer; width: 60px; height: 60px;" />
                    }
                    else
                    {
                        <span class="text-muted">No Image</span>
                    }
                </DisplayTemplate>
            </DataGridColumn>

            <DataGridColumn TItem="CourseModel" Caption="Upload Image" Displayable="true" Editable="true">
                <EditTemplate Context="cellContext">
                    <InputFile OnChange="@((e) => OnInputFileChange(e, cellContext.Item.Id))" />
                </EditTemplate>
            </DataGridColumn>

            <DataGridCommandColumn TItem="CourseModel" />
        </DataGridColumns>
    </DataGrid>
</div>

<Modal @bind-Visible="showImageModal" Size="ModalSize.Large">
    <ModalHeader>
        <strong>Course Image Preview</strong>
    </ModalHeader>
    <ModalBody>
        <img src="@selectedImageUrl" alt="Preview" style="max-width: 100%; height: auto;" />
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Secondary" Clicked="() => showImageModal = false">Close</Button>
    </ModalFooter>
</Modal>

@if (courses == null || courses.Count == 0)
{
    <p class="mt-4">No courses available.</p>
}

@code {
    private List<CourseModel> courses = new();
    private Dictionary<Guid, IBrowserFile?> fileUploads = new();
    private bool showImageModal = false;
    private string selectedImageUrl = "";
    private string currentUserId = string.Empty;    
    private string currentUsername = string.Empty;    

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
            currentUsername = user.Identity.Name ?? string.Empty;

        if (user.Identity?.IsAuthenticated == true)
        {
            var response = await Http.GetFromJsonAsync<UserIdModel>($"{AppSettings.BackendUrl}/api/Users/GetUserIdByEmail?email={user.Identity.Name}");
            currentUserId = response?.UserId ?? string.Empty;
        }

        var fetchedCourses = await Http.GetFromJsonAsync<List<CourseModel>>($"{AppSettings.BackendUrl}/api/Courses/GetAllCourses") ?? new();

        foreach (var course in fetchedCourses)
        {
            if (!string.IsNullOrWhiteSpace(course.ImageUrl) && !course.ImageUrl.StartsWith("http", StringComparison.OrdinalIgnoreCase))
                course.ImageUrl = $"{AppSettings.BackendUrl}{course.ImageUrl}";
        }

        courses = fetchedCourses;
    }

    private void ShowImage(string url)
    {
        selectedImageUrl = url.StartsWith("http") ? url : $"{AppSettings.BackendUrl}{url}";
        showImageModal = true;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e, Guid courseId)
    {
        fileUploads[courseId] = e.File;
    }

    private async Task OnRowInserted(SavedRowItem<CourseModel, Dictionary<string, object>> e)
    {
        try
        {
            var course = e.Item;
            var imageFile = fileUploads.GetValueOrDefault(course.Id);

            if (course.PublishedDate == default)
                course.PublishedDate = DateTime.Today;

            var newCourse = new CreateCourseModel
            {
                Id = Guid.NewGuid(),
                Title = course.Title,
                Description = course.Description,
                Price = course.Price,
                Duration = course.Duration,
                CourseLanguage = course.CourseLanguage,
                CourseLevel = course.CourseLevel,
                // LecturerId = currentUsername,
                LecturerId = currentUserId,
                PublishedDate = course.PublishedDate ?? DateTime.Today,
                ImageFile = imageFile
            };

            var form = await BuildMultipartFormData(newCourse);

            var response = await Http.PostAsync($"{AppSettings.BackendUrl}/api/Courses/CreateCourse", form);

            if (response.IsSuccessStatusCode)
            {
                var newId = await response.Content.ReadFromJsonAsync<Guid>();
                var refreshed = await Http.GetFromJsonAsync<CourseModel>($"{AppSettings.BackendUrl}/api/Courses/{newId}");

                if (refreshed != null)
                {
                    if (!string.IsNullOrWhiteSpace(refreshed.ImageUrl) && !refreshed.ImageUrl.StartsWith("http"))
                        refreshed.ImageUrl = $"{AppSettings.BackendUrl}{refreshed.ImageUrl}";

                    courses.Add(refreshed);
                }

                fileUploads.Remove(course.Id); // Clean up
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync(); // Get the raw error message
                Console.WriteLine($"Insert failed: {response.StatusCode}\nDetails: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inserting course: {ex.Message}");
        }
    }

    private async Task OnRowUpdated(SavedRowItem<CourseModel, Dictionary<string, object>> e)
    {
        var course = e.Item;
        var imageFile = fileUploads.GetValueOrDefault(course.Id);

        var updateCourse = new CreateCourseModel
        {
            Id = course.Id,
            Title = course.Title,
            Description = course.Description,
            Price = course.Price,
            Duration = course.Duration,
            CourseLanguage = course.CourseLanguage,
            CourseLevel = course.CourseLevel,
            LecturerId = currentUsername,
            PublishedDate = course.PublishedDate ?? DateTime.Today,
            ImageFile = imageFile
        };

        var form = await BuildMultipartFormData(updateCourse);
        var response = await Http.PutAsync($"{AppSettings.BackendUrl}/api/Courses/UpdateCourseWithImage", form);

        if (response.IsSuccessStatusCode)
        {
            fileUploads.Remove(course.Id); // Clean up
        }
    }

    private async Task OnRowRemoved(CourseModel course)
    {
        var response = await Http.DeleteAsync($"{AppSettings.BackendUrl}/api/Courses/DeleteCourse/{course.Id}");
        if (response.IsSuccessStatusCode)
            courses.Remove(course);
    }

    private async Task<MultipartFormDataContent> BuildMultipartFormData(CreateCourseModel course)
    {
        var form = new MultipartFormDataContent
        {
            { new StringContent(course.Id.ToString()), nameof(course.Id) },
            { new StringContent(course.Title), nameof(course.Title) },
            { new StringContent(course.Description), nameof(course.Description) },
            { new StringContent(course.Price.ToString()), nameof(course.Price) },
            { new StringContent(course.Duration), nameof(course.Duration) },
            { new StringContent(course.CourseLanguage), nameof(course.CourseLanguage) },
            { new StringContent(course.CourseLevel), nameof(course.CourseLevel) },
            { new StringContent(course.LecturerId), nameof(course.LecturerId) },
            { new StringContent(course.PublishedDate.ToString("o")), nameof(course.PublishedDate) }
        };

        if (course.ImageFile is not null)
        {
            var stream = course.ImageFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var content = new StreamContent(stream);
            content.Headers.ContentType = new MediaTypeHeaderValue(course.ImageFile.ContentType);
            form.Add(content, "ImageFile", course.ImageFile.Name);
        }

        return form;
    }
}
