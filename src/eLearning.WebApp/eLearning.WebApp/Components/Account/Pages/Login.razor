@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using eLearning.WebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="row">
    <section class="signup-sec full-screen">
        <div class="container"> 
            <div class="row align-items-center">
                <div class="col-xl-5 col-md-5">
				    <div class="signup-thumb">
					    <img class="img-fluid" src="images/shape-bg.png" alt="Sign Up">
				    </div>
			    </div>
                <div class="col-xl-7 col-md-7">
                    <div class="login-form">
                        @* <h2 class="display-3 text-center mb-5">Let's Sign In LearnSpace</h2> *@
                        <StatusMessage Message="@errorMessage" />
                            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                                <DataAnnotationsValidator />
                                <h2>Log in to continue your learning journey</h2>
                                <hr />
                                <ValidationSummary class="text-danger" role="alert" />
                                <div class="form-group position-relative">
                                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                    <ValidationMessage For="() => Input.Email" class="text-danger" />
						        </div>
                                <div class="form-group position-relative">
                                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                                    <ValidationMessage For="() => Input.Password" class="text-danger" />
						        </div>
                                <button type="submit" class="btn btn-primary w-100">Sign In</button>
                                <div class="form-footer mt-4 text-center">
							        <div class="d-flex justify-content-between">
								        <div class="form-check">
									        <input type="checkbox" class="form-check-input" id="logged-in">
									        <label class="form-check-label" for="logged-in">
                                                <InputCheckbox @bind-value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                                Stay Logged In
                                            </label>
								        </div>
								        <a href="Account/ForgotPassword" class="text-reset">Forget Password?</a>
							        </div>
							        <p>Don't have an account? <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-primary fw-bold">Sign Up Now</a></p>
						        </div>
                        </EditForm>
                    </div>
                </div>                    
            </div>
        </div>
    </section>    
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            //Logger.LogInformation("User logged in.");
            // RedirectManager.RedirectTo(ReturnUrl);
            Logger.LogInformation("User logged in.");

            // If the user has a pending cart, always redirect to /cart
            if (ReturnUrl != null && ReturnUrl.Contains("/cart", StringComparison.OrdinalIgnoreCase))
            {
                RedirectManager.RedirectTo("/cart");
            }
            else
            {
                RedirectManager.RedirectTo(ReturnUrl ?? "/");
            }
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
