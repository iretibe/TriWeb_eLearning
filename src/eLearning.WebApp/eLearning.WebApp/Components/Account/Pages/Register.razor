@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using eLearning.WebApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager Nav

<PageTitle>Register</PageTitle>


<div class="row">
    <section class="signup-sec full-screen">
		<div class="container">
			<div class="row align-items-center">
				<div class="col-xl-5 col-md-5">
					<div class="signup-thumb">
						<img class="img-fluid" src="images/signup-2.png" alt="Sign Up">
					</div>
				</div>
				<div class="col-xl-7 col-md-7">
					<div class="signup-form">
						<h2>Sign up and start learning</h2>
						<StatusMessage Message="@Message" />
                        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
							<DataAnnotationsValidator />
                            <hr />
                            <ValidationSummary class="text-danger" role="alert" />
                            <div class="form-group position-relative">
								<InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
							</div>
							<div class="form-group position-relative">
								<InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="password" aria-required="true" placeholder="password" />
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
							</div>
							<div class="form-group position-relative">
								<InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="confirm password" />
                                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
							</div>
                            <button type="submit" class="btn btn-primary w-100">Sign Up</button>

							<div class="form-footer mt-4 text-center">
								<p>Already have account? <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-primary fw-bold">Login Now</a></p>
							</div>
						</EditForm>
					</div>
				</div>
			</div>
		</div>
	</section>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        await UserManager.AddToRoleAsync(user, "Learner");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        // Optionally send email, but continue without waiting. Will be configured later
        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        // // Redirect to login and preserve the return URL from cart
        // var redirectUrl = string.IsNullOrEmpty(ReturnUrl)
        //     ? "/account/login"
        //     : $"/account/login?returnUrl={Uri.EscapeDataString(ReturnUrl)}";

        // Nav.NavigateTo(redirectUrl, forceLoad: true);
        // return;

        // // await SignInManager.SignInAsync(user, isPersistent: false);
        // // RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
